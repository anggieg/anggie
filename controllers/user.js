/** functions to manage / manipulate user data stored in MongoDB **/
/** through microservice "anggie.js" **/
const anggie = require('../services/anggie');


// get all user data
exports.getUsers = async (req, res, next) => {
    try {
        const users = await anggie.getUsers();
        
        res.status(200).json({
            message: 'retrieve user data success !',
            users: users
        });
        
    }catch(error){
        error.statusCode = 500;
        next(error);
    }
}

// create a user data
exports.postUser = async (req, res, next) => {

    // get user parameter to be written to database from JSON request payload
    const data = {
        userName: req.body.userName,
        emailAddress: req.body.emailAddress,
        identityNumber: req.body.identityNumber,
    };

    try{
        // write a user data to database through the service
        const createdUser = await anggie.postUser(data);

        // return response
        res.status(200).json({
            message: 'create user data success !',
            user: createdUser
        });
    }catch(error){
        // if error occurred return status code and error message
        error.statusCode = 500;
        next(error);
    }
}

// delete a user data by userId
exports.deleteUser = async (req, res, next) => {

    // get userId from URL query parameters
    const { userId } = req.params;

    try{
        // deleta a user data in database through the service
        const deletedUser = await anggie.deleteUser(userId);
        
        // return response
        res.status(200).json({
            message: 'delete user data success !',
            user: deletedUser
        });
    }catch(error){
        // if error occurred return status code and error message
        error.statusCode = 500;
        next(error);
    }
}

// update a user data by userId
exports.updateUser = async (req, res, next) => {
    
    // get userId from URL query parameters
    const { userId } = req.params;

    // get user parameter as an update to be written to database from JSON request payload
    // accountNumber parameter is unchangeable because it is autogenerated on user data creation
    const data = {
        userName: req.body.userName,
        emailAddress: req.body.emailAddress,
        identityNumber: req.body.identityNumber
    }

    try{

        // update the user data through the service
        const updatedUser = await anggie.updateUser(userId, data);
        
        // return the response
        res.status(200).json({
            message: 'update user data success !',
            user: updatedUser
        });
    }catch(error){
        // if error occurred return status code and error message
        error.statusCode = 500;
        next(error);
    }
}

// get a user data by accountNumber
exports.getUserByAccNo = async (req, res, next) => {
    
    try{
        // get accountNumber from URL query parameters
        const { accNo } = req.params;

        if(isNaN(accNo)){
            const error = new Error(`${accNo} is not a valid number`)
            throw error;
        }
        
        // get the user data through the service
        const user = await anggie.getUserByAccNo(accNo);
        
        // return the response
        res.status(200).json({
            message: 'retrieve user data success !',
            user: user
        });
    }catch(error){
        // if error occurred return status code and error message
        error.statusCode = 500;
        next(error);
    }
}

// get a user data by identityNumber
exports.getUserByIdentityNo = async (req, res, next) => {

    // get identityNumber from URL query parameters
    
    try{
        const { identityNo } = req.params;

        if(isNaN(identityNo)){
            const error = new Error(`${identityNo} is not a valid number`)
            throw error;
        }
        
        // get the user data through the service
        const user = await anggie.getUserByIdentityNo(identityNo);
        
        // return the response
        res.status(200).json({
            message: 'retrieve user data success !',
            user: user
        });
    }catch(error){
        // if error occurred return status code and error message
        error.statusCode = 500;
        next(error);
    }
}